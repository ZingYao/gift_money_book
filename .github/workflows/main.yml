name: Build on Tag

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  build:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: ls&pwd
        run: ls;pwd

      - name: Checkout code
        uses: actions/checkout@v2

      - name: ls&pwd
        run: ls;pwd

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '18.*'

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build in Node
        run: cd frontend;npm install; npm run build

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-verison: '1.18.*'

      - name: Copy build.zip to Go environment
        run: cp frontend/build.zip backend/

      - name: Gen Golang static code
        run: cd backend;go run main.go build;

      - name: Go Build Windows Amd64
        run: cd backend; GOARCH=amd64 GOOS=windows go build -o ../gift_money_book.windows.amd64.exe main.go

      - name: Go Build Windows 385
        run: cd backend; GOARCH=386 GOOS=windows go build -o ../gift_money_book.windows.386.exe main.go

      - name: Go Build Windows arm
        run: cd backend; GOARCH=arm GOOS=windows go build -o ../gift_money_book.windows.arm.exe main.go

      - name: Go Build Windows arm64
        run: cd backend; GOARCH=arm64 GOOS=windows go build -o ../gift_money_book.windows.arm64.exe main.go

      - name: Go Build Darwin arm64
        run: cd backend; GOARCH=arm64 GOOS=darwin go build -o ../gift_money_book.macos.arm64 main.go

      - name: Go Build Darwin amd64
        run: cd backend; GOARCH=amd64 GOOS=darwin go build -o ../gift_money_book.macos.amd64 main.go

      - name: Go Build Linux 386
        run: cd backend; GOARCH=386 GOOS=linux go build -o ../gift_money_book.linux.386 main.go

      - name: Go Build Linux amd64
        run: cd backend; GOARCH=amd64 GOOS=linux go build -o ../gift_money_book.linux.amd64 main.go

      - name: Go Build Linux arm
        run: cd backend; GOARCH=arm GOOS=linux go build -o ../gift_money_book.linux.arm main.go

      - name: Go Build Linux arm64
        run: cd backend; GOARCH=arm64 GOOS=linux go build -o ../gift_money_book.linux.arm64 main.go

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release:${{ github.ref }}
          body: "This is a release"
          draft: true

      - name: Upload Asset Windows 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.windows.386.exe
          asset_name: gift_money_book.windows.386.exe
          asset_content_type: application/octet-stream

      - name: Upload Asset Windows amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.windows.amd64.exe
          asset_name: gift_money_book.windows.amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Asset Windows arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.windows.arm.exe
          asset_name: gift_money_book.windows.arm.exe
          asset_content_type: application/octet-stream

      - name: Upload Asset Windows arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.windows.arm64.exe
          asset_name: gift_money_book.windows.arm64.exe
          asset_content_type: application/octet-stream

      - name: Upload Asset Darwin arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.macos.arm64
          asset_name: gift_money_book.macos.arm64
          asset_content_type: application/octet-stream

      - name: Upload Asset Darwin amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.macos.amd64
          asset_name: gift_money_book.macos.amd64
          asset_content_type: application/octet-stream

      - name: Upload Asset Linux 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.linux.386
          asset_name: gift_money_book.linux.386
          asset_content_type: application/octet-stream

      - name: Upload Asset Linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.linux.amd64
          asset_name: gift_money_book.linux.amd64
          asset_content_type: application/octet-stream

      - name: Upload Asset Windows arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.linux.arm
          asset_name: gift_money_book.linux.arm
          asset_content_type: application/octet-stream

      - name: Upload Asset Windows arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gift_money_book.linux.arm64
          asset_name: gift_money_book.linux.arm64
          asset_content_type: application/octet-stream
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: ls&pwd
        run: ls;pwd